// <auto-generated />
using System;
using Desafio_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Desafio_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201203185945_MigracaoInicial")]
    partial class MigracaoInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Desafio_API.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("dateRegister")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Document = "123.456.789-10",
                            Email = "dany@email.com",
                            Name = "Daenerys Targeryes",
                            Password = "Senh@",
                            dateRegister = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Document = "123.456.789-10",
                            Email = "dany@email.com",
                            Name = "Aria Stark",
                            Password = "Senh@",
                            dateRegister = new DateTime(2020, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Document = "123.456.789-10",
                            Email = "dany@email.com",
                            Name = "Sansa Stark",
                            Password = "Senh@",
                            dateRegister = new DateTime(2020, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Desafio_API.Models.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CNPJ = "12.123.321/0189-03",
                            Name = "Asus"
                        },
                        new
                        {
                            Id = 2,
                            CNPJ = "21.456.608/1025-87",
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = 3,
                            CNPJ = "58.103.328/1056-01",
                            Name = "Dell"
                        });
                });

            modelBuilder.Entity("Desafio_API.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Promotion")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("codProduct")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("valuePromotion")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Eletrônicos",
                            FornecedorId = 1,
                            Image = "asus.jpg",
                            Name = "Notebook",
                            Promotion = false,
                            Quantity = 10,
                            Value = 2500m,
                            codProduct = "A01",
                            valuePromotion = 0m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Eletrônicos",
                            FornecedorId = 2,
                            Image = "lenovo.jpg",
                            Name = "Computador",
                            Promotion = true,
                            Quantity = 100,
                            Value = 3500m,
                            codProduct = "A02",
                            valuePromotion = 3200m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Eletrônicos",
                            FornecedorId = 3,
                            Image = "dell.jpg",
                            Name = "Computador",
                            Promotion = true,
                            Quantity = 50,
                            Value = 3000m,
                            codProduct = "A03",
                            valuePromotion = 2900m
                        });
                });

            modelBuilder.Entity("Desafio_API.Models.ProdutoVenda", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("VendaId")
                        .HasColumnType("int");

                    b.HasKey("ProdutoId", "VendaId");

                    b.HasIndex("VendaId");

                    b.ToTable("ProdutosVendas");
                });

            modelBuilder.Entity("Desafio_API.Models.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("totalCompra")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Vendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            FornecedorId = 1,
                            dataCompra = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            totalCompra = 2500m
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 1,
                            FornecedorId = 2,
                            dataCompra = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            totalCompra = 3500m
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 1,
                            FornecedorId = 3,
                            dataCompra = new DateTime(2020, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            totalCompra = 4500m
                        });
                });

            modelBuilder.Entity("Desafio_API.Models.Produto", b =>
                {
                    b.HasOne("Desafio_API.Models.Fornecedor", "Fornecedor")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Desafio_API.Models.ProdutoVenda", b =>
                {
                    b.HasOne("Desafio_API.Models.Produto", "Produto")
                        .WithMany("ProdutosVendas")
                        .HasForeignKey("ProdutoId")
                        .IsRequired();

                    b.HasOne("Desafio_API.Models.Venda", "Venda")
                        .WithMany("ProdutosVendas")
                        .HasForeignKey("VendaId")
                        .IsRequired();
                });

            modelBuilder.Entity("Desafio_API.Models.Venda", b =>
                {
                    b.HasOne("Desafio_API.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Desafio_API.Models.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
